openapi: 3.0.3
info:
  title: "AI Travel Planner API"
  description: "AI旅行プラン提案サービスのAPI仕様"
  version: "1.0.0"
servers:
  - url: "https://api.example.com/v1"
    description: "本番環境"
  - url: "http://localhost:3000/v1"
    description: "開発環境"

tags:
  - name: Auth
    description: "ユーザー認証関連"
  - name: Spots
    description: "観光施設関連"
  - name: Reviews
    description: "レビュー関連"
  - name: Plans
    description: "旅行プラン関連"

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: "新規ユーザー登録"
      description: "新しいユーザーアカウントを作成します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "201":
          description: "ユーザー登録成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "リクエストが不正"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      tags:
        - Auth
      summary: "ユーザーログイン"
      description: "ユーザーがログインし、認証トークンを取得します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: "ログイン成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "JWT認証トークン"
        "401":
          description: "認証失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/me:
    get:
      tags:
        - Auth
      summary: "ログインユーザー情報取得"
      description: "現在ログインしているユーザーの情報を取得します。"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /spots:
    get:
      tags:
        - Spots
      summary: "観光施設一覧の取得"
      description: "キーワードや場所で観光施設を検索し、一覧を取得します。"
      parameters:
        - name: keyword
          in: query
          description: "検索キーワード（施設名、説明など）"
          schema:
            type: string
      responses:
        "200":
          description: "取得成功"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Spot"
    post:
      summary: "新しい観光施設を登録する"
      description: "事業者ユーザーが新しい観光施設の情報をシステムに登録します。"
      tags:
        - Spots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpotInput"
      responses:
        "201":
          description: "登録成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Spot"
        "400":
          description: "リクエストが不正"
        "401":
          description: "認証エラー"

  /spots/{spotId}:
    get:
      tags:
        - Spots
      summary: "特定の観光施設の詳細取得"
      description: "指定されたIDの観光施設の詳細情報を取得します。"
      parameters:
        - name: spotId
          in: path
          required: true
          description: "観光施設のID"
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Spot"
        "404":
          description: "施設が見つからない"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - Spots
      summary: "観光施設情報の更新"
      description: "指定されたIDの観光施設の情報を更新します。"
      parameters:
        - name: spotId
          in: path
          required: true
          description: "観光施設のID"
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpotInput"
      responses:
        "200":
          description: "更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Spot"
        "400":
          description: "リクエストが不正"
        "404":
          description: "施設が見つからない"

  /spots/{spotId}/reviews:
    get:
      tags:
        - Reviews
      summary: "レビュー一覧の取得"
      description: "特定の観光施設に投稿されたレビューの一覧を取得します。"
      parameters:
        - name: spotId
          in: path
          required: true
          description: "観光施設のID"
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "取得成功"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
    post:
      tags:
        - Reviews
      summary: "レビューの投稿"
      description: "特定の観光施設に新しいレビューを投稿します。"
      parameters:
        - name: spotId
          in: path
          required: true
          description: "観光施設のID"
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewInput"
      responses:
        "201":
          description: "投稿成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "400":
          description: "リクエストが不正"

  /plans/generate:
    post:
      tags:
        - Plans
      summary: "旅行プランの生成"
      description: "ユーザーの要望に基づいてAIが旅行プランを生成・提案します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanRequest"
      responses:
        "200":
          description: "生成成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "400":
          description: "リクエストが不正"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "ユーザーの一意なID"
        name:
          type: string
          description: "ユーザー名"
        email:
          type: string
          format: email
          description: "メールアドレス"
      required:
        - id
        - name
        - email
    UserRegister:
      type: object
      properties:
        name:
          type: string
          description: "ユーザー名"
          example: "山田 太郎"
        email:
          type: string
          format: email
          description: "メールアドレス"
          example: "user@example.com"
        password:
          type: string
          format: password
          description: "パスワード"
          example: "securepassword123"
      required:
        - name
        - email
        - password
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "securepassword123"
      required:
        - email
        - password
    Spot:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "観光施設の一意なID"
        name:
          type: string
          description: "観光施設名"
        description:
          type: string
          description: "観光施設の説明"
        address:
          type: string
          description: "住所"
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - createdAt
    SpotInput:
      type: object
      properties:
        name:
          type: string
          description: "観光施設名"
          example: "隠れ家カフェ「森のささやき」"
        description:
          type: string
          description: "AIに伝える施設の特徴や魅力"
          example: "静かな森の中に佇む、こだわりのコーヒーと手作りケーキが自慢のカフェです。都会の喧騒を忘れ、ゆったりとした時間を過ごしたい方に最適。"
        address:
          type: string
          description: "住所"
          example: "東京都秘境市森の中1-2-3"
      required:
        - name
        - description
    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        spotId:
          type: string
          format: uuid
        rating:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
        comment:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - spotId
        - rating
        - createdAt
    ReviewInput:
      type: object
      properties:
        rating:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
          description: "評価（5段階）"
        comment:
          type: string
          description: "レビューコメント"
          example: "とても素敵な場所でした！"
      required:
        - rating
    Plan:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          description: "プランのタイトル"
        description:
          type: string
          description: "プランの概要説明"
        spots:
          type: array
          items:
            $ref: "#/components/schemas/Spot"
      required:
        - id
        - title
        - spots
    PlanRequest:
      type: object
      properties:
        prompt:
          type: string
          description: "AIへの旅行プラン生成の要望（自然言語）"
          example: "週末に東京から日帰りで行ける、自然を満喫できる静かな場所への旅行プランを考えてください。温泉と美味しいものが食べたいです。"
      required:
        - prompt
    Error:
      type: object
      properties:
        code:
          type: string
          description: "エラーコード"
        message:
          type: string
          description: "エラーメッセージ"
      required:
        - code
        - message

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT