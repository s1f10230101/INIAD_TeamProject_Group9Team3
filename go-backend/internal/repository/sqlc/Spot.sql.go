// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: Spot.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createSpot = `-- name: CreateSpot :one
INSERT INTO Spot (
    Id,
    Name,
    Description,
    Address
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, description, address, created_at
`

type CreateSpotParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Address     string    `json:"address"`
}

func (q *Queries) CreateSpot(ctx context.Context, arg CreateSpotParams) (Spot, error) {
	row := q.db.QueryRow(ctx, createSpot,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Address,
	)
	var i Spot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSpot = `-- name: DeleteSpot :exec
DELETE FROM Spot
WHERE Id = $1
`

func (q *Queries) DeleteSpot(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSpot, id)
	return err
}

const getSpot = `-- name: GetSpot :one
SELECT id, name, description, address, created_at FROM Spot
WHERE Id = $1
`

func (q *Queries) GetSpot(ctx context.Context, id uuid.UUID) (Spot, error) {
	row := q.db.QueryRow(ctx, getSpot, id)
	var i Spot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const listSpots = `-- name: ListSpots :many
SELECT id, name, description, address, created_at FROM Spot
ORDER BY Created_at DESC
`

func (q *Queries) ListSpots(ctx context.Context) ([]Spot, error) {
	rows, err := q.db.Query(ctx, listSpots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Spot
	for rows.Next() {
		var i Spot
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Address,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpot = `-- name: UpdateSpot :one
UPDATE Spot
SET 
    Name = $2,
    Description = $3,
    Address = $4
WHERE Id = $1
RETURNING id, name, description, address, created_at
`

type UpdateSpotParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Address     string    `json:"address"`
}

func (q *Queries) UpdateSpot(ctx context.Context, arg UpdateSpotParams) (Spot, error) {
	row := q.db.QueryRow(ctx, updateSpot,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Address,
	)
	var i Spot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}
