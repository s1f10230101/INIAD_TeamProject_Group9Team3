// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: Review.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (
    id,
    spot_id,
    user_id,
    rating,
    comment,
    created_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, spot_id, user_id, rating, comment, created_at
`

type CreateReviewParams struct {
	ID        uuid.UUID          `json:"id"`
	SpotID    uuid.UUID          `json:"spot_id"`
	UserID    uuid.UUID          `json:"user_id"`
	Rating    int32              `json:"rating"`
	Comment   string             `json:"comment"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, createReview,
		arg.ID,
		arg.SpotID,
		arg.UserID,
		arg.Rating,
		arg.Comment,
		arg.CreatedAt,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.SpotID,
		&i.UserID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const getReviewsBySpotID = `-- name: GetReviewsBySpotID :many
SELECT id, spot_id, user_id, rating, comment, created_at FROM reviews
WHERE spot_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetReviewsBySpotID(ctx context.Context, spotID uuid.UUID) ([]Review, error) {
	rows, err := q.db.Query(ctx, getReviewsBySpotID, spotID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.SpotID,
			&i.UserID,
			&i.Rating,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
