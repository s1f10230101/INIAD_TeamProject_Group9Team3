//go:build go1.22

// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/nullable"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// JWTAuth defines model for JWTAuth.
type JWTAuth struct {
	// Token JWTトークン
	Token string `json:"token"`
}

// PlanResponse defines model for PlanResponse.
type PlanResponse struct {
	// Description プランの詳細説明
	Description string `json:"description"`

	// Name プランの名称
	Name string `json:"name"`

	// Spots プランに含まれる観光スポットのリスト
	Spots []SpotResponse `json:"spots"`
}

// Prompt defines model for Prompt.
type Prompt struct {
	// Prompt 旅行の希望や条件
	Prompt string `json:"prompt"`
}

// ReviewResister defines model for ReviewResister.
type ReviewResister struct {
	// Comment レビューのコメント
	Comment string `json:"comment"`

	// Rating レビューの評価（1から5までの整数）
	Rating int `json:"rating"`

	// UserId レビューを投稿したユーザーの識別子
	UserId string `json:"userId"`
}

// ReviewResponse defines model for ReviewResponse.
type ReviewResponse struct {
	// Comment レビューのコメント
	Comment string `json:"comment"`

	// CreatedAt レビューの作成日時
	CreatedAt time.Time `json:"createdAt"`

	// Rating レビューの評価（1から5までの整数）
	Rating int `json:"rating"`

	// SpotId レビュー対象の観光スポットの識別子
	SpotId Uuid `json:"spotId"`

	// UserId レビューを投稿したユーザーの識別子
	UserId Uuid `json:"userId"`
}

// SpotResister defines model for SpotResister.
type SpotResister struct {
	// Address 観光スポットの所在地
	Address string `json:"address"`

	// Description 観光スポットの説明
	Description string `json:"description"`

	// Name 観光スポットの名称
	Name string `json:"name"`
}

// SpotResponse defines model for SpotResponse.
type SpotResponse struct {
	// Address 観光スポットの所在地
	Address string `json:"address"`

	// CreatedAt 作成日時(utc unix timestamp)
	CreatedAt time.Time `json:"createdAt"`

	// Description 観光スポットの説明
	Description string `json:"description"`

	// Id 観光スポットの一意の識別子
	Id Uuid `json:"id"`

	// Name 観光スポットの名称
	Name string `json:"name"`
}

// SpotUpdate defines model for SpotUpdate.
type SpotUpdate struct {
	// Address 観光スポットの所在地
	Address nullable.Nullable[string] `json:"address"`

	// Description 観光スポットの説明
	Description nullable.Nullable[string] `json:"description"`

	// Name 観光スポットの名称
	Name nullable.Nullable[string] `json:"name"`
}

// UserResister defines model for UserResister.
type UserResister struct {
	// Email メールアドレス
	Email string `json:"email"`

	// Password パスワード
	Password string `json:"password"`

	// Username ユーザー名
	Username string `json:"username"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	// Email メールアドレス
	Email string `json:"email"`

	// Id ユーザーの一意の識別子
	Id string `json:"id"`

	// Username ユーザー名
	Username string `json:"username"`
}

// Uuid defines model for Uuid.
type Uuid = openapi_types.UUID

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetUserInfoParams defines parameters for GetUserInfo.
type GetUserInfoParams struct {
	Authorization string `json:"Authorization"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody LoginUserJSONBody

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = UserResister

// GeneratePlanJSONRequestBody defines body for GeneratePlan for application/json ContentType.
type GeneratePlanJSONRequestBody = Prompt

// CreateSpotJSONRequestBody defines body for CreateSpot for application/json ContentType.
type CreateSpotJSONRequestBody = SpotResister

// UpdateSpotJSONRequestBody defines body for UpdateSpot for application/json ContentType.
type UpdateSpotJSONRequestBody = SpotUpdate

// CreateReviewJSONRequestBody defines body for CreateReview for application/json ContentType.
type CreateReviewJSONRequestBody = ReviewResister

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	HealthCheckOpenAPI(w http.ResponseWriter, r *http.Request)
	// ユーザーログイン
	// (POST /auth/login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// ユーザー情報取得
	// (GET /auth/me)
	GetUserInfo(w http.ResponseWriter, r *http.Request, params GetUserInfoParams)
	// ユーザー登録
	// (POST /auth/register)
	RegisterUser(w http.ResponseWriter, r *http.Request)
	// 旅行プランの生成
	// (POST /plans)
	GeneratePlan(w http.ResponseWriter, r *http.Request)
	// 観光スポット一覧の取得
	// (GET /spots)
	GetAllSpots(w http.ResponseWriter, r *http.Request)
	// 観光スポットの登録
	// (POST /spots)
	CreateSpot(w http.ResponseWriter, r *http.Request)
	// 観光スポットの詳細取得
	// (GET /spots/{spotId})
	GetSpotById(w http.ResponseWriter, r *http.Request, spotId Uuid)
	// 観光スポットの更新
	// (PUT /spots/{spotId})
	UpdateSpot(w http.ResponseWriter, r *http.Request, spotId Uuid)
	// 観光スポットのレビュー一覧の取得
	// (GET /spots/{spotId}/reviews)
	GetReviewsBySpotId(w http.ResponseWriter, r *http.Request, spotId Uuid)
	// レビューの投稿
	// (POST /spots/{spotId}/reviews)
	CreateReview(w http.ResponseWriter, r *http.Request, spotId Uuid)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// HealthCheckOpenAPI operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckOpenAPI(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheckOpenAPI(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserInfoParams

	headers := r.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authorization", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authorization", Err: err})
			return
		}

		params.Authorization = Authorization

	} else {
		err := fmt.Errorf("Header parameter Authorization is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Authorization", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GeneratePlan operation middleware
func (siw *ServerInterfaceWrapper) GeneratePlan(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GeneratePlan(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllSpots operation middleware
func (siw *ServerInterfaceWrapper) GetAllSpots(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllSpots(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSpot operation middleware
func (siw *ServerInterfaceWrapper) CreateSpot(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSpot(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSpotById operation middleware
func (siw *ServerInterfaceWrapper) GetSpotById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spotId" -------------
	var spotId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "spotId", r.PathValue("spotId"), &spotId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spotId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSpotById(w, r, spotId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateSpot operation middleware
func (siw *ServerInterfaceWrapper) UpdateSpot(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spotId" -------------
	var spotId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "spotId", r.PathValue("spotId"), &spotId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spotId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSpot(w, r, spotId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReviewsBySpotId operation middleware
func (siw *ServerInterfaceWrapper) GetReviewsBySpotId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spotId" -------------
	var spotId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "spotId", r.PathValue("spotId"), &spotId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spotId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReviewsBySpotId(w, r, spotId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateReview operation middleware
func (siw *ServerInterfaceWrapper) CreateReview(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spotId" -------------
	var spotId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "spotId", r.PathValue("spotId"), &spotId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spotId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateReview(w, r, spotId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/{$}", wrapper.HealthCheckOpenAPI)
	m.HandleFunc("POST "+options.BaseURL+"/auth/login", wrapper.LoginUser)
	m.HandleFunc("GET "+options.BaseURL+"/auth/me", wrapper.GetUserInfo)
	m.HandleFunc("POST "+options.BaseURL+"/auth/register", wrapper.RegisterUser)
	m.HandleFunc("POST "+options.BaseURL+"/plans", wrapper.GeneratePlan)
	m.HandleFunc("GET "+options.BaseURL+"/spots", wrapper.GetAllSpots)
	m.HandleFunc("POST "+options.BaseURL+"/spots", wrapper.CreateSpot)
	m.HandleFunc("GET "+options.BaseURL+"/spots/{spotId}", wrapper.GetSpotById)
	m.HandleFunc("PUT "+options.BaseURL+"/spots/{spotId}", wrapper.UpdateSpot)
	m.HandleFunc("GET "+options.BaseURL+"/spots/{spotId}/reviews", wrapper.GetReviewsBySpotId)
	m.HandleFunc("POST "+options.BaseURL+"/spots/{spotId}/reviews", wrapper.CreateReview)

	return m
}

type HealthCheckOpenAPIRequestObject struct {
}

type HealthCheckOpenAPIResponseObject interface {
	VisitHealthCheckOpenAPIResponse(w http.ResponseWriter) error
}

type HealthCheckOpenAPI200TextResponse string

func (response HealthCheckOpenAPI200TextResponse) VisitHealthCheckOpenAPIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type HealthCheckOpenAPI500JSONResponse struct {
	Message string `json:"message"`
}

func (response HealthCheckOpenAPI500JSONResponse) VisitHealthCheckOpenAPIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoginUserRequestObject struct {
	Body *LoginUserJSONRequestBody
}

type LoginUserResponseObject interface {
	VisitLoginUserResponse(w http.ResponseWriter) error
}

type LoginUser200JSONResponse JWTAuth

func (response LoginUser200JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginUser401JSONResponse struct {
	Message string `json:"message"`
}

func (response LoginUser401JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LoginUser500JSONResponse struct {
	Message string `json:"message"`
}

func (response LoginUser500JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserInfoRequestObject struct {
	Params GetUserInfoParams
}

type GetUserInfoResponseObject interface {
	VisitGetUserInfoResponse(w http.ResponseWriter) error
}

type GetUserInfo200JSONResponse UserResponse

func (response GetUserInfo200JSONResponse) VisitGetUserInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserInfo401JSONResponse struct {
	Message string `json:"message"`
}

func (response GetUserInfo401JSONResponse) VisitGetUserInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUserInfo500JSONResponse struct {
	Message string `json:"message"`
}

func (response GetUserInfo500JSONResponse) VisitGetUserInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUserRequestObject struct {
	Body *RegisterUserJSONRequestBody
}

type RegisterUserResponseObject interface {
	VisitRegisterUserResponse(w http.ResponseWriter) error
}

type RegisterUser200JSONResponse JWTAuth

func (response RegisterUser200JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser400JSONResponse struct {
	Message string `json:"message"`
}

func (response RegisterUser400JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser500JSONResponse struct {
	Message string `json:"message"`
}

func (response RegisterUser500JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GeneratePlanRequestObject struct {
	Body *GeneratePlanJSONRequestBody
}

type GeneratePlanResponseObject interface {
	VisitGeneratePlanResponse(w http.ResponseWriter) error
}

type GeneratePlan200TexteventStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GeneratePlan200TexteventStreamResponse) VisitGeneratePlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GeneratePlan400JSONResponse struct {
	Message string `json:"message"`
}

func (response GeneratePlan400JSONResponse) VisitGeneratePlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GeneratePlan500JSONResponse struct {
	Message string `json:"message"`
}

func (response GeneratePlan500JSONResponse) VisitGeneratePlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllSpotsRequestObject struct {
}

type GetAllSpotsResponseObject interface {
	VisitGetAllSpotsResponse(w http.ResponseWriter) error
}

type GetAllSpots200JSONResponse []SpotResponse

func (response GetAllSpots200JSONResponse) VisitGetAllSpotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllSpots500JSONResponse struct {
	Message string `json:"message"`
}

func (response GetAllSpots500JSONResponse) VisitGetAllSpotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSpotRequestObject struct {
	Body *CreateSpotJSONRequestBody
}

type CreateSpotResponseObject interface {
	VisitCreateSpotResponse(w http.ResponseWriter) error
}

type CreateSpot201JSONResponse SpotResponse

func (response CreateSpot201JSONResponse) VisitCreateSpotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSpot400JSONResponse struct {
	Message string `json:"message"`
}

func (response CreateSpot400JSONResponse) VisitCreateSpotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSpot500JSONResponse struct {
	Message string `json:"message"`
}

func (response CreateSpot500JSONResponse) VisitCreateSpotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSpotByIdRequestObject struct {
	SpotId Uuid `json:"spotId"`
}

type GetSpotByIdResponseObject interface {
	VisitGetSpotByIdResponse(w http.ResponseWriter) error
}

type GetSpotById200JSONResponse SpotResponse

func (response GetSpotById200JSONResponse) VisitGetSpotByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSpotById404JSONResponse struct {
	Message string `json:"message"`
}

func (response GetSpotById404JSONResponse) VisitGetSpotByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSpotById500JSONResponse struct {
	Message string `json:"message"`
}

func (response GetSpotById500JSONResponse) VisitGetSpotByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSpotRequestObject struct {
	SpotId Uuid `json:"spotId"`
	Body   *UpdateSpotJSONRequestBody
}

type UpdateSpotResponseObject interface {
	VisitUpdateSpotResponse(w http.ResponseWriter) error
}

type UpdateSpot200JSONResponse SpotResponse

func (response UpdateSpot200JSONResponse) VisitUpdateSpotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSpot400JSONResponse struct {
	Message string `json:"message"`
}

func (response UpdateSpot400JSONResponse) VisitUpdateSpotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSpot404JSONResponse struct {
	Message string `json:"message"`
}

func (response UpdateSpot404JSONResponse) VisitUpdateSpotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSpot500JSONResponse struct {
	Message string `json:"message"`
}

func (response UpdateSpot500JSONResponse) VisitUpdateSpotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetReviewsBySpotIdRequestObject struct {
	SpotId Uuid `json:"spotId"`
}

type GetReviewsBySpotIdResponseObject interface {
	VisitGetReviewsBySpotIdResponse(w http.ResponseWriter) error
}

type GetReviewsBySpotId200JSONResponse []ReviewResponse

func (response GetReviewsBySpotId200JSONResponse) VisitGetReviewsBySpotIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetReviewsBySpotId500JSONResponse struct {
	Message string `json:"message"`
}

func (response GetReviewsBySpotId500JSONResponse) VisitGetReviewsBySpotIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateReviewRequestObject struct {
	SpotId Uuid `json:"spotId"`
	Body   *CreateReviewJSONRequestBody
}

type CreateReviewResponseObject interface {
	VisitCreateReviewResponse(w http.ResponseWriter) error
}

type CreateReview201JSONResponse ReviewResponse

func (response CreateReview201JSONResponse) VisitCreateReviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateReview400JSONResponse struct {
	Message string `json:"message"`
}

func (response CreateReview400JSONResponse) VisitCreateReviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateReview500JSONResponse struct {
	Message string `json:"message"`
}

func (response CreateReview500JSONResponse) VisitCreateReviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /)
	HealthCheckOpenAPI(ctx context.Context, request HealthCheckOpenAPIRequestObject) (HealthCheckOpenAPIResponseObject, error)
	// ユーザーログイン
	// (POST /auth/login)
	LoginUser(ctx context.Context, request LoginUserRequestObject) (LoginUserResponseObject, error)
	// ユーザー情報取得
	// (GET /auth/me)
	GetUserInfo(ctx context.Context, request GetUserInfoRequestObject) (GetUserInfoResponseObject, error)
	// ユーザー登録
	// (POST /auth/register)
	RegisterUser(ctx context.Context, request RegisterUserRequestObject) (RegisterUserResponseObject, error)
	// 旅行プランの生成
	// (POST /plans)
	GeneratePlan(ctx context.Context, request GeneratePlanRequestObject) (GeneratePlanResponseObject, error)
	// 観光スポット一覧の取得
	// (GET /spots)
	GetAllSpots(ctx context.Context, request GetAllSpotsRequestObject) (GetAllSpotsResponseObject, error)
	// 観光スポットの登録
	// (POST /spots)
	CreateSpot(ctx context.Context, request CreateSpotRequestObject) (CreateSpotResponseObject, error)
	// 観光スポットの詳細取得
	// (GET /spots/{spotId})
	GetSpotById(ctx context.Context, request GetSpotByIdRequestObject) (GetSpotByIdResponseObject, error)
	// 観光スポットの更新
	// (PUT /spots/{spotId})
	UpdateSpot(ctx context.Context, request UpdateSpotRequestObject) (UpdateSpotResponseObject, error)
	// 観光スポットのレビュー一覧の取得
	// (GET /spots/{spotId}/reviews)
	GetReviewsBySpotId(ctx context.Context, request GetReviewsBySpotIdRequestObject) (GetReviewsBySpotIdResponseObject, error)
	// レビューの投稿
	// (POST /spots/{spotId}/reviews)
	CreateReview(ctx context.Context, request CreateReviewRequestObject) (CreateReviewResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// HealthCheckOpenAPI operation middleware
func (sh *strictHandler) HealthCheckOpenAPI(w http.ResponseWriter, r *http.Request) {
	var request HealthCheckOpenAPIRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheckOpenAPI(ctx, request.(HealthCheckOpenAPIRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheckOpenAPI")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthCheckOpenAPIResponseObject); ok {
		if err := validResponse.VisitHealthCheckOpenAPIResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginUser operation middleware
func (sh *strictHandler) LoginUser(w http.ResponseWriter, r *http.Request) {
	var request LoginUserRequestObject

	var body LoginUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginUser(ctx, request.(LoginUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginUserResponseObject); ok {
		if err := validResponse.VisitLoginUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserInfo operation middleware
func (sh *strictHandler) GetUserInfo(w http.ResponseWriter, r *http.Request, params GetUserInfoParams) {
	var request GetUserInfoRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserInfo(ctx, request.(GetUserInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserInfoResponseObject); ok {
		if err := validResponse.VisitGetUserInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterUser operation middleware
func (sh *strictHandler) RegisterUser(w http.ResponseWriter, r *http.Request) {
	var request RegisterUserRequestObject

	var body RegisterUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUser(ctx, request.(RegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterUserResponseObject); ok {
		if err := validResponse.VisitRegisterUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GeneratePlan operation middleware
func (sh *strictHandler) GeneratePlan(w http.ResponseWriter, r *http.Request) {
	var request GeneratePlanRequestObject

	var body GeneratePlanJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GeneratePlan(ctx, request.(GeneratePlanRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GeneratePlan")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GeneratePlanResponseObject); ok {
		if err := validResponse.VisitGeneratePlanResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllSpots operation middleware
func (sh *strictHandler) GetAllSpots(w http.ResponseWriter, r *http.Request) {
	var request GetAllSpotsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllSpots(ctx, request.(GetAllSpotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllSpots")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllSpotsResponseObject); ok {
		if err := validResponse.VisitGetAllSpotsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSpot operation middleware
func (sh *strictHandler) CreateSpot(w http.ResponseWriter, r *http.Request) {
	var request CreateSpotRequestObject

	var body CreateSpotJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSpot(ctx, request.(CreateSpotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSpot")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSpotResponseObject); ok {
		if err := validResponse.VisitCreateSpotResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSpotById operation middleware
func (sh *strictHandler) GetSpotById(w http.ResponseWriter, r *http.Request, spotId Uuid) {
	var request GetSpotByIdRequestObject

	request.SpotId = spotId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpotById(ctx, request.(GetSpotByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpotById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSpotByIdResponseObject); ok {
		if err := validResponse.VisitGetSpotByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSpot operation middleware
func (sh *strictHandler) UpdateSpot(w http.ResponseWriter, r *http.Request, spotId Uuid) {
	var request UpdateSpotRequestObject

	request.SpotId = spotId

	var body UpdateSpotJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSpot(ctx, request.(UpdateSpotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSpot")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateSpotResponseObject); ok {
		if err := validResponse.VisitUpdateSpotResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetReviewsBySpotId operation middleware
func (sh *strictHandler) GetReviewsBySpotId(w http.ResponseWriter, r *http.Request, spotId Uuid) {
	var request GetReviewsBySpotIdRequestObject

	request.SpotId = spotId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetReviewsBySpotId(ctx, request.(GetReviewsBySpotIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReviewsBySpotId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetReviewsBySpotIdResponseObject); ok {
		if err := validResponse.VisitGetReviewsBySpotIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateReview operation middleware
func (sh *strictHandler) CreateReview(w http.ResponseWriter, r *http.Request, spotId Uuid) {
	var request CreateReviewRequestObject

	request.SpotId = spotId

	var body CreateReviewJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateReview(ctx, request.(CreateReviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateReview")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateReviewResponseObject); ok {
		if err := validResponse.VisitCreateReviewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
