//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	// Code エラーコード
	Code string `json:"code"`

	// Message エラーメッセージ
	Message string `json:"message"`
}

// Plan defines model for Plan.
type Plan struct {
	// Description プランの概要説明
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	Spots       []Spot             `json:"spots"`

	// Title プランのタイトル
	Title string `json:"title"`
}

// PlanRequest defines model for PlanRequest.
type PlanRequest struct {
	// Prompt AIへの旅行プラン生成の要望（自然言語）
	Prompt string `json:"prompt"`
}

// Review defines model for Review.
type Review struct {
	Comment   *string            `json:"comment,omitempty"`
	CreatedAt time.Time          `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
	Rating    int32              `json:"rating"`
	SpotId    openapi_types.UUID `json:"spotId"`
	UserId    openapi_types.UUID `json:"userId"`
}

// ReviewInput defines model for ReviewInput.
type ReviewInput struct {
	// Comment レビューコメント
	Comment *string `json:"comment,omitempty"`

	// Rating 評価（5段階）
	Rating int32 `json:"rating"`
}

// Spot defines model for Spot.
type Spot struct {
	// Address 住所
	Address   *string   `json:"address,omitempty"`
	CreatedAt time.Time `json:"createdAt"`

	// Description 観光施設の説明
	Description *string `json:"description,omitempty"`

	// Id 観光施設の一意なID
	Id openapi_types.UUID `json:"id"`

	// Name 観光施設名
	Name string `json:"name"`
}

// SpotInput defines model for SpotInput.
type SpotInput struct {
	// Address 住所
	Address string `json:"address"`

	// Description AIに伝える施設の特徴や魅力
	Description string `json:"description"`

	// Name 観光施設名
	Name string `json:"name"`
}

// User defines model for User.
type User struct {
	// Email メールアドレス
	Email openapi_types.Email `json:"email"`

	// Id ユーザーの一意なID
	Id openapi_types.UUID `json:"id"`

	// Name ユーザー名
	Name string `json:"name"`
}

// UserLogin defines model for UserLogin.
type UserLogin struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// UserRegister defines model for UserRegister.
type UserRegister struct {
	// Email メールアドレス
	Email openapi_types.Email `json:"email"`

	// Name ユーザー名
	Name string `json:"name"`

	// Password パスワード
	Password string `json:"password"`
}

// GetSpotsParams defines parameters for GetSpots.
type GetSpotsParams struct {
	// Keyword 検索キーワード（施設名、説明など）
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = UserLogin

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = UserRegister

// PostPlansGenerateJSONRequestBody defines body for PostPlansGenerate for application/json ContentType.
type PostPlansGenerateJSONRequestBody = PlanRequest

// PostSpotsJSONRequestBody defines body for PostSpots for application/json ContentType.
type PostSpotsJSONRequestBody = SpotInput

// PutSpotsSpotIdJSONRequestBody defines body for PutSpotsSpotId for application/json ContentType.
type PutSpotsSpotIdJSONRequestBody = SpotInput

// PostSpotsSpotIdReviewsJSONRequestBody defines body for PostSpotsSpotIdReviews for application/json ContentType.
type PostSpotsSpotIdReviewsJSONRequestBody = ReviewInput

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAuthLoginWithBody request with any body
	PostAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthLogin(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthMe request
	GetAuthMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthRegisterWithBody request with any body
	PostAuthRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthRegister(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPlansGenerateWithBody request with any body
	PostPlansGenerateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPlansGenerate(ctx context.Context, body PostPlansGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpots request
	GetSpots(ctx context.Context, params *GetSpotsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSpotsWithBody request with any body
	PostSpotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSpots(ctx context.Context, body PostSpotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpotsSpotId request
	GetSpotsSpotId(ctx context.Context, spotId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSpotsSpotIdWithBody request with any body
	PutSpotsSpotIdWithBody(ctx context.Context, spotId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSpotsSpotId(ctx context.Context, spotId openapi_types.UUID, body PutSpotsSpotIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpotsSpotIdReviews request
	GetSpotsSpotIdReviews(ctx context.Context, spotId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSpotsSpotIdReviewsWithBody request with any body
	PostSpotsSpotIdReviewsWithBody(ctx context.Context, spotId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSpotsSpotIdReviews(ctx context.Context, spotId openapi_types.UUID, body PostSpotsSpotIdReviewsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLogin(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRegister(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlansGenerateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlansGenerateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlansGenerate(ctx context.Context, body PostPlansGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlansGenerateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpots(ctx context.Context, params *GetSpotsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpotsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpotsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpotsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpots(ctx context.Context, body PostSpotsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpotsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpotsSpotId(ctx context.Context, spotId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpotsSpotIdRequest(c.Server, spotId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSpotsSpotIdWithBody(ctx context.Context, spotId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSpotsSpotIdRequestWithBody(c.Server, spotId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSpotsSpotId(ctx context.Context, spotId openapi_types.UUID, body PutSpotsSpotIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSpotsSpotIdRequest(c.Server, spotId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpotsSpotIdReviews(ctx context.Context, spotId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpotsSpotIdReviewsRequest(c.Server, spotId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpotsSpotIdReviewsWithBody(ctx context.Context, spotId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpotsSpotIdReviewsRequestWithBody(c.Server, spotId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSpotsSpotIdReviews(ctx context.Context, spotId openapi_types.UUID, body PostSpotsSpotIdReviewsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSpotsSpotIdReviewsRequest(c.Server, spotId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAuthLoginRequest calls the generic PostAuthLogin builder with application/json body
func NewPostAuthLoginRequest(server string, body PostAuthLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthLoginRequestWithBody generates requests for PostAuthLogin with any type of body
func NewPostAuthLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthMeRequest generates requests for GetAuthMe
func NewGetAuthMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthRegisterRequest calls the generic PostAuthRegister builder with application/json body
func NewPostAuthRegisterRequest(server string, body PostAuthRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthRegisterRequestWithBody generates requests for PostAuthRegister with any type of body
func NewPostAuthRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPlansGenerateRequest calls the generic PostPlansGenerate builder with application/json body
func NewPostPlansGenerateRequest(server string, body PostPlansGenerateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPlansGenerateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPlansGenerateRequestWithBody generates requests for PostPlansGenerate with any type of body
func NewPostPlansGenerateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plans/generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSpotsRequest generates requests for GetSpots
func NewGetSpotsRequest(server string, params *GetSpotsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Keyword != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyword", runtime.ParamLocationQuery, *params.Keyword); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSpotsRequest calls the generic PostSpots builder with application/json body
func NewPostSpotsRequest(server string, body PostSpotsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSpotsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSpotsRequestWithBody generates requests for PostSpots with any type of body
func NewPostSpotsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSpotsSpotIdRequest generates requests for GetSpotsSpotId
func NewGetSpotsSpotIdRequest(server string, spotId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spotId", runtime.ParamLocationPath, spotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSpotsSpotIdRequest calls the generic PutSpotsSpotId builder with application/json body
func NewPutSpotsSpotIdRequest(server string, spotId openapi_types.UUID, body PutSpotsSpotIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSpotsSpotIdRequestWithBody(server, spotId, "application/json", bodyReader)
}

// NewPutSpotsSpotIdRequestWithBody generates requests for PutSpotsSpotId with any type of body
func NewPutSpotsSpotIdRequestWithBody(server string, spotId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spotId", runtime.ParamLocationPath, spotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSpotsSpotIdReviewsRequest generates requests for GetSpotsSpotIdReviews
func NewGetSpotsSpotIdReviewsRequest(server string, spotId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spotId", runtime.ParamLocationPath, spotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spots/%s/reviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSpotsSpotIdReviewsRequest calls the generic PostSpotsSpotIdReviews builder with application/json body
func NewPostSpotsSpotIdReviewsRequest(server string, spotId openapi_types.UUID, body PostSpotsSpotIdReviewsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSpotsSpotIdReviewsRequestWithBody(server, spotId, "application/json", bodyReader)
}

// NewPostSpotsSpotIdReviewsRequestWithBody generates requests for PostSpotsSpotIdReviews with any type of body
func NewPostSpotsSpotIdReviewsRequestWithBody(server string, spotId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spotId", runtime.ParamLocationPath, spotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spots/%s/reviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAuthLoginWithBodyWithResponse request with any body
	PostAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error)

	PostAuthLoginWithResponse(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error)

	// GetAuthMeWithResponse request
	GetAuthMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthMeResponse, error)

	// PostAuthRegisterWithBodyWithResponse request with any body
	PostAuthRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error)

	PostAuthRegisterWithResponse(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error)

	// PostPlansGenerateWithBodyWithResponse request with any body
	PostPlansGenerateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlansGenerateResponse, error)

	PostPlansGenerateWithResponse(ctx context.Context, body PostPlansGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlansGenerateResponse, error)

	// GetSpotsWithResponse request
	GetSpotsWithResponse(ctx context.Context, params *GetSpotsParams, reqEditors ...RequestEditorFn) (*GetSpotsResponse, error)

	// PostSpotsWithBodyWithResponse request with any body
	PostSpotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpotsResponse, error)

	PostSpotsWithResponse(ctx context.Context, body PostSpotsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpotsResponse, error)

	// GetSpotsSpotIdWithResponse request
	GetSpotsSpotIdWithResponse(ctx context.Context, spotId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSpotsSpotIdResponse, error)

	// PutSpotsSpotIdWithBodyWithResponse request with any body
	PutSpotsSpotIdWithBodyWithResponse(ctx context.Context, spotId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSpotsSpotIdResponse, error)

	PutSpotsSpotIdWithResponse(ctx context.Context, spotId openapi_types.UUID, body PutSpotsSpotIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSpotsSpotIdResponse, error)

	// GetSpotsSpotIdReviewsWithResponse request
	GetSpotsSpotIdReviewsWithResponse(ctx context.Context, spotId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSpotsSpotIdReviewsResponse, error)

	// PostSpotsSpotIdReviewsWithBodyWithResponse request with any body
	PostSpotsSpotIdReviewsWithBodyWithResponse(ctx context.Context, spotId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpotsSpotIdReviewsResponse, error)

	PostSpotsSpotIdReviewsWithResponse(ctx context.Context, spotId openapi_types.UUID, body PostSpotsSpotIdReviewsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpotsSpotIdReviewsResponse, error)
}

type PostAuthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Token JWT認証トークン
		Token *string `json:"token,omitempty"`
	}
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r PostAuthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetAuthMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r PostAuthRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPlansGenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Plan
}

// Status returns HTTPResponse.Status
func (r PostPlansGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPlansGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Spot
}

// Status returns HTTPResponse.Status
func (r GetSpotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSpotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Spot
}

// Status returns HTTPResponse.Status
func (r PostSpotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSpotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpotsSpotIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Spot
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSpotsSpotIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpotsSpotIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSpotsSpotIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Spot
}

// Status returns HTTPResponse.Status
func (r PutSpotsSpotIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSpotsSpotIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpotsSpotIdReviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Review
}

// Status returns HTTPResponse.Status
func (r GetSpotsSpotIdReviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpotsSpotIdReviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSpotsSpotIdReviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Review
}

// Status returns HTTPResponse.Status
func (r PostSpotsSpotIdReviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSpotsSpotIdReviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAuthLoginWithBodyWithResponse request with arbitrary body returning *PostAuthLoginResponse
func (c *ClientWithResponses) PostAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error) {
	rsp, err := c.PostAuthLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLoginResponse(rsp)
}

func (c *ClientWithResponses) PostAuthLoginWithResponse(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error) {
	rsp, err := c.PostAuthLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLoginResponse(rsp)
}

// GetAuthMeWithResponse request returning *GetAuthMeResponse
func (c *ClientWithResponses) GetAuthMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthMeResponse, error) {
	rsp, err := c.GetAuthMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthMeResponse(rsp)
}

// PostAuthRegisterWithBodyWithResponse request with arbitrary body returning *PostAuthRegisterResponse
func (c *ClientWithResponses) PostAuthRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error) {
	rsp, err := c.PostAuthRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostAuthRegisterWithResponse(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error) {
	rsp, err := c.PostAuthRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRegisterResponse(rsp)
}

// PostPlansGenerateWithBodyWithResponse request with arbitrary body returning *PostPlansGenerateResponse
func (c *ClientWithResponses) PostPlansGenerateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlansGenerateResponse, error) {
	rsp, err := c.PostPlansGenerateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlansGenerateResponse(rsp)
}

func (c *ClientWithResponses) PostPlansGenerateWithResponse(ctx context.Context, body PostPlansGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlansGenerateResponse, error) {
	rsp, err := c.PostPlansGenerate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlansGenerateResponse(rsp)
}

// GetSpotsWithResponse request returning *GetSpotsResponse
func (c *ClientWithResponses) GetSpotsWithResponse(ctx context.Context, params *GetSpotsParams, reqEditors ...RequestEditorFn) (*GetSpotsResponse, error) {
	rsp, err := c.GetSpots(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpotsResponse(rsp)
}

// PostSpotsWithBodyWithResponse request with arbitrary body returning *PostSpotsResponse
func (c *ClientWithResponses) PostSpotsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpotsResponse, error) {
	rsp, err := c.PostSpotsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpotsResponse(rsp)
}

func (c *ClientWithResponses) PostSpotsWithResponse(ctx context.Context, body PostSpotsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpotsResponse, error) {
	rsp, err := c.PostSpots(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpotsResponse(rsp)
}

// GetSpotsSpotIdWithResponse request returning *GetSpotsSpotIdResponse
func (c *ClientWithResponses) GetSpotsSpotIdWithResponse(ctx context.Context, spotId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSpotsSpotIdResponse, error) {
	rsp, err := c.GetSpotsSpotId(ctx, spotId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpotsSpotIdResponse(rsp)
}

// PutSpotsSpotIdWithBodyWithResponse request with arbitrary body returning *PutSpotsSpotIdResponse
func (c *ClientWithResponses) PutSpotsSpotIdWithBodyWithResponse(ctx context.Context, spotId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSpotsSpotIdResponse, error) {
	rsp, err := c.PutSpotsSpotIdWithBody(ctx, spotId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSpotsSpotIdResponse(rsp)
}

func (c *ClientWithResponses) PutSpotsSpotIdWithResponse(ctx context.Context, spotId openapi_types.UUID, body PutSpotsSpotIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSpotsSpotIdResponse, error) {
	rsp, err := c.PutSpotsSpotId(ctx, spotId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSpotsSpotIdResponse(rsp)
}

// GetSpotsSpotIdReviewsWithResponse request returning *GetSpotsSpotIdReviewsResponse
func (c *ClientWithResponses) GetSpotsSpotIdReviewsWithResponse(ctx context.Context, spotId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSpotsSpotIdReviewsResponse, error) {
	rsp, err := c.GetSpotsSpotIdReviews(ctx, spotId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpotsSpotIdReviewsResponse(rsp)
}

// PostSpotsSpotIdReviewsWithBodyWithResponse request with arbitrary body returning *PostSpotsSpotIdReviewsResponse
func (c *ClientWithResponses) PostSpotsSpotIdReviewsWithBodyWithResponse(ctx context.Context, spotId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSpotsSpotIdReviewsResponse, error) {
	rsp, err := c.PostSpotsSpotIdReviewsWithBody(ctx, spotId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpotsSpotIdReviewsResponse(rsp)
}

func (c *ClientWithResponses) PostSpotsSpotIdReviewsWithResponse(ctx context.Context, spotId openapi_types.UUID, body PostSpotsSpotIdReviewsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSpotsSpotIdReviewsResponse, error) {
	rsp, err := c.PostSpotsSpotIdReviews(ctx, spotId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSpotsSpotIdReviewsResponse(rsp)
}

// ParsePostAuthLoginResponse parses an HTTP response from a PostAuthLoginWithResponse call
func ParsePostAuthLoginResponse(rsp *http.Response) (*PostAuthLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Token JWT認証トークン
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetAuthMeResponse parses an HTTP response from a GetAuthMeWithResponse call
func ParseGetAuthMeResponse(rsp *http.Response) (*GetAuthMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostAuthRegisterResponse parses an HTTP response from a PostAuthRegisterWithResponse call
func ParsePostAuthRegisterResponse(rsp *http.Response) (*PostAuthRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostPlansGenerateResponse parses an HTTP response from a PostPlansGenerateWithResponse call
func ParsePostPlansGenerateResponse(rsp *http.Response) (*PostPlansGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPlansGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Plan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSpotsResponse parses an HTTP response from a GetSpotsWithResponse call
func ParseGetSpotsResponse(rsp *http.Response) (*GetSpotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Spot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSpotsResponse parses an HTTP response from a PostSpotsWithResponse call
func ParsePostSpotsResponse(rsp *http.Response) (*PostSpotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSpotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Spot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetSpotsSpotIdResponse parses an HTTP response from a GetSpotsSpotIdWithResponse call
func ParseGetSpotsSpotIdResponse(rsp *http.Response) (*GetSpotsSpotIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpotsSpotIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Spot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutSpotsSpotIdResponse parses an HTTP response from a PutSpotsSpotIdWithResponse call
func ParsePutSpotsSpotIdResponse(rsp *http.Response) (*PutSpotsSpotIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSpotsSpotIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Spot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSpotsSpotIdReviewsResponse parses an HTTP response from a GetSpotsSpotIdReviewsWithResponse call
func ParseGetSpotsSpotIdReviewsResponse(rsp *http.Response) (*GetSpotsSpotIdReviewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpotsSpotIdReviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Review
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSpotsSpotIdReviewsResponse parses an HTTP response from a PostSpotsSpotIdReviewsWithResponse call
func ParsePostSpotsSpotIdReviewsResponse(rsp *http.Response) (*PostSpotsSpotIdReviewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSpotsSpotIdReviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Review
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザーログイン
	// (POST /auth/login)
	PostAuthLogin(w http.ResponseWriter, r *http.Request)
	// ログインユーザー情報取得
	// (GET /auth/me)
	GetAuthMe(w http.ResponseWriter, r *http.Request)
	// 新規ユーザー登録
	// (POST /auth/register)
	PostAuthRegister(w http.ResponseWriter, r *http.Request)
	// 旅行プランの生成
	// (POST /plans/generate)
	PostPlansGenerate(w http.ResponseWriter, r *http.Request)
	// 観光施設一覧の取得
	// (GET /spots)
	GetSpots(w http.ResponseWriter, r *http.Request, params GetSpotsParams)
	// 新しい観光施設を登録する
	// (POST /spots)
	PostSpots(w http.ResponseWriter, r *http.Request)
	// 特定の観光施設の詳細取得
	// (GET /spots/{spotId})
	GetSpotsSpotId(w http.ResponseWriter, r *http.Request, spotId openapi_types.UUID)
	// 観光施設情報の更新
	// (PUT /spots/{spotId})
	PutSpotsSpotId(w http.ResponseWriter, r *http.Request, spotId openapi_types.UUID)
	// レビュー一覧の取得
	// (GET /spots/{spotId}/reviews)
	GetSpotsSpotIdReviews(w http.ResponseWriter, r *http.Request, spotId openapi_types.UUID)
	// レビューの投稿
	// (POST /spots/{spotId}/reviews)
	PostSpotsSpotIdReviews(w http.ResponseWriter, r *http.Request, spotId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAuthMe operation middleware
func (siw *ServerInterfaceWrapper) GetAuthMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPlansGenerate operation middleware
func (siw *ServerInterfaceWrapper) PostPlansGenerate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPlansGenerate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSpots operation middleware
func (siw *ServerInterfaceWrapper) GetSpots(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSpotsParams

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", r.URL.Query(), &params.Keyword)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "keyword", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSpots(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSpots operation middleware
func (siw *ServerInterfaceWrapper) PostSpots(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSpots(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSpotsSpotId operation middleware
func (siw *ServerInterfaceWrapper) GetSpotsSpotId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spotId" -------------
	var spotId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "spotId", r.PathValue("spotId"), &spotId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spotId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSpotsSpotId(w, r, spotId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutSpotsSpotId operation middleware
func (siw *ServerInterfaceWrapper) PutSpotsSpotId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spotId" -------------
	var spotId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "spotId", r.PathValue("spotId"), &spotId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spotId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutSpotsSpotId(w, r, spotId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSpotsSpotIdReviews operation middleware
func (siw *ServerInterfaceWrapper) GetSpotsSpotIdReviews(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spotId" -------------
	var spotId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "spotId", r.PathValue("spotId"), &spotId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spotId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSpotsSpotIdReviews(w, r, spotId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSpotsSpotIdReviews operation middleware
func (siw *ServerInterfaceWrapper) PostSpotsSpotIdReviews(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "spotId" -------------
	var spotId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "spotId", r.PathValue("spotId"), &spotId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spotId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSpotsSpotIdReviews(w, r, spotId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	m.HandleFunc("GET "+options.BaseURL+"/auth/me", wrapper.GetAuthMe)
	m.HandleFunc("POST "+options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
	m.HandleFunc("POST "+options.BaseURL+"/plans/generate", wrapper.PostPlansGenerate)
	m.HandleFunc("GET "+options.BaseURL+"/spots", wrapper.GetSpots)
	m.HandleFunc("POST "+options.BaseURL+"/spots", wrapper.PostSpots)
	m.HandleFunc("GET "+options.BaseURL+"/spots/{spotId}", wrapper.GetSpotsSpotId)
	m.HandleFunc("PUT "+options.BaseURL+"/spots/{spotId}", wrapper.PutSpotsSpotId)
	m.HandleFunc("GET "+options.BaseURL+"/spots/{spotId}/reviews", wrapper.GetSpotsSpotIdReviews)
	m.HandleFunc("POST "+options.BaseURL+"/spots/{spotId}/reviews", wrapper.PostSpotsSpotIdReviews)

	return m
}

type PostAuthLoginRequestObject struct {
	Body *PostAuthLoginJSONRequestBody
}

type PostAuthLoginResponseObject interface {
	VisitPostAuthLoginResponse(w http.ResponseWriter) error
}

type PostAuthLogin200JSONResponse struct {
	// Token JWT認証トークン
	Token *string `json:"token,omitempty"`
}

func (response PostAuthLogin200JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin401JSONResponse Error

func (response PostAuthLogin401JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthMeRequestObject struct {
}

type GetAuthMeResponseObject interface {
	VisitGetAuthMeResponse(w http.ResponseWriter) error
}

type GetAuthMe200JSONResponse User

func (response GetAuthMe200JSONResponse) VisitGetAuthMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthMe401JSONResponse Error

func (response GetAuthMe401JSONResponse) VisitGetAuthMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegisterRequestObject struct {
	Body *PostAuthRegisterJSONRequestBody
}

type PostAuthRegisterResponseObject interface {
	VisitPostAuthRegisterResponse(w http.ResponseWriter) error
}

type PostAuthRegister201JSONResponse User

func (response PostAuthRegister201JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister400JSONResponse Error

func (response PostAuthRegister400JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPlansGenerateRequestObject struct {
	Body *PostPlansGenerateJSONRequestBody
}

type PostPlansGenerateResponseObject interface {
	VisitPostPlansGenerateResponse(w http.ResponseWriter) error
}

type PostPlansGenerate200JSONResponse Plan

func (response PostPlansGenerate200JSONResponse) VisitPostPlansGenerateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPlansGenerate400Response struct {
}

func (response PostPlansGenerate400Response) VisitPostPlansGenerateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetSpotsRequestObject struct {
	Params GetSpotsParams
}

type GetSpotsResponseObject interface {
	VisitGetSpotsResponse(w http.ResponseWriter) error
}

type GetSpots200JSONResponse []Spot

func (response GetSpots200JSONResponse) VisitGetSpotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSpotsRequestObject struct {
	Body *PostSpotsJSONRequestBody
}

type PostSpotsResponseObject interface {
	VisitPostSpotsResponse(w http.ResponseWriter) error
}

type PostSpots201JSONResponse Spot

func (response PostSpots201JSONResponse) VisitPostSpotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSpots400Response struct {
}

func (response PostSpots400Response) VisitPostSpotsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostSpots401Response struct {
}

func (response PostSpots401Response) VisitPostSpotsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetSpotsSpotIdRequestObject struct {
	SpotId openapi_types.UUID `json:"spotId"`
}

type GetSpotsSpotIdResponseObject interface {
	VisitGetSpotsSpotIdResponse(w http.ResponseWriter) error
}

type GetSpotsSpotId200JSONResponse Spot

func (response GetSpotsSpotId200JSONResponse) VisitGetSpotsSpotIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSpotsSpotId404JSONResponse Error

func (response GetSpotsSpotId404JSONResponse) VisitGetSpotsSpotIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutSpotsSpotIdRequestObject struct {
	SpotId openapi_types.UUID `json:"spotId"`
	Body   *PutSpotsSpotIdJSONRequestBody
}

type PutSpotsSpotIdResponseObject interface {
	VisitPutSpotsSpotIdResponse(w http.ResponseWriter) error
}

type PutSpotsSpotId200JSONResponse Spot

func (response PutSpotsSpotId200JSONResponse) VisitPutSpotsSpotIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutSpotsSpotId400Response struct {
}

func (response PutSpotsSpotId400Response) VisitPutSpotsSpotIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutSpotsSpotId404Response struct {
}

func (response PutSpotsSpotId404Response) VisitPutSpotsSpotIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetSpotsSpotIdReviewsRequestObject struct {
	SpotId openapi_types.UUID `json:"spotId"`
}

type GetSpotsSpotIdReviewsResponseObject interface {
	VisitGetSpotsSpotIdReviewsResponse(w http.ResponseWriter) error
}

type GetSpotsSpotIdReviews200JSONResponse []Review

func (response GetSpotsSpotIdReviews200JSONResponse) VisitGetSpotsSpotIdReviewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSpotsSpotIdReviewsRequestObject struct {
	SpotId openapi_types.UUID `json:"spotId"`
	Body   *PostSpotsSpotIdReviewsJSONRequestBody
}

type PostSpotsSpotIdReviewsResponseObject interface {
	VisitPostSpotsSpotIdReviewsResponse(w http.ResponseWriter) error
}

type PostSpotsSpotIdReviews201JSONResponse Review

func (response PostSpotsSpotIdReviews201JSONResponse) VisitPostSpotsSpotIdReviewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSpotsSpotIdReviews400Response struct {
}

func (response PostSpotsSpotIdReviews400Response) VisitPostSpotsSpotIdReviewsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// ユーザーログイン
	// (POST /auth/login)
	PostAuthLogin(ctx context.Context, request PostAuthLoginRequestObject) (PostAuthLoginResponseObject, error)
	// ログインユーザー情報取得
	// (GET /auth/me)
	GetAuthMe(ctx context.Context, request GetAuthMeRequestObject) (GetAuthMeResponseObject, error)
	// 新規ユーザー登録
	// (POST /auth/register)
	PostAuthRegister(ctx context.Context, request PostAuthRegisterRequestObject) (PostAuthRegisterResponseObject, error)
	// 旅行プランの生成
	// (POST /plans/generate)
	PostPlansGenerate(ctx context.Context, request PostPlansGenerateRequestObject) (PostPlansGenerateResponseObject, error)
	// 観光施設一覧の取得
	// (GET /spots)
	GetSpots(ctx context.Context, request GetSpotsRequestObject) (GetSpotsResponseObject, error)
	// 新しい観光施設を登録する
	// (POST /spots)
	PostSpots(ctx context.Context, request PostSpotsRequestObject) (PostSpotsResponseObject, error)
	// 特定の観光施設の詳細取得
	// (GET /spots/{spotId})
	GetSpotsSpotId(ctx context.Context, request GetSpotsSpotIdRequestObject) (GetSpotsSpotIdResponseObject, error)
	// 観光施設情報の更新
	// (PUT /spots/{spotId})
	PutSpotsSpotId(ctx context.Context, request PutSpotsSpotIdRequestObject) (PutSpotsSpotIdResponseObject, error)
	// レビュー一覧の取得
	// (GET /spots/{spotId}/reviews)
	GetSpotsSpotIdReviews(ctx context.Context, request GetSpotsSpotIdReviewsRequestObject) (GetSpotsSpotIdReviewsResponseObject, error)
	// レビューの投稿
	// (POST /spots/{spotId}/reviews)
	PostSpotsSpotIdReviews(ctx context.Context, request PostSpotsSpotIdReviewsRequestObject) (PostSpotsSpotIdReviewsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAuthLogin operation middleware
func (sh *strictHandler) PostAuthLogin(w http.ResponseWriter, r *http.Request) {
	var request PostAuthLoginRequestObject

	var body PostAuthLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogin(ctx, request.(PostAuthLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAuthLoginResponseObject); ok {
		if err := validResponse.VisitPostAuthLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAuthMe operation middleware
func (sh *strictHandler) GetAuthMe(w http.ResponseWriter, r *http.Request) {
	var request GetAuthMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthMe(ctx, request.(GetAuthMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAuthMeResponseObject); ok {
		if err := validResponse.VisitGetAuthMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthRegister operation middleware
func (sh *strictHandler) PostAuthRegister(w http.ResponseWriter, r *http.Request) {
	var request PostAuthRegisterRequestObject

	var body PostAuthRegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRegister(ctx, request.(PostAuthRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRegister")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAuthRegisterResponseObject); ok {
		if err := validResponse.VisitPostAuthRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPlansGenerate operation middleware
func (sh *strictHandler) PostPlansGenerate(w http.ResponseWriter, r *http.Request) {
	var request PostPlansGenerateRequestObject

	var body PostPlansGenerateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPlansGenerate(ctx, request.(PostPlansGenerateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPlansGenerate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPlansGenerateResponseObject); ok {
		if err := validResponse.VisitPostPlansGenerateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSpots operation middleware
func (sh *strictHandler) GetSpots(w http.ResponseWriter, r *http.Request, params GetSpotsParams) {
	var request GetSpotsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpots(ctx, request.(GetSpotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpots")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSpotsResponseObject); ok {
		if err := validResponse.VisitGetSpotsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSpots operation middleware
func (sh *strictHandler) PostSpots(w http.ResponseWriter, r *http.Request) {
	var request PostSpotsRequestObject

	var body PostSpotsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSpots(ctx, request.(PostSpotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSpots")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSpotsResponseObject); ok {
		if err := validResponse.VisitPostSpotsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSpotsSpotId operation middleware
func (sh *strictHandler) GetSpotsSpotId(w http.ResponseWriter, r *http.Request, spotId openapi_types.UUID) {
	var request GetSpotsSpotIdRequestObject

	request.SpotId = spotId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpotsSpotId(ctx, request.(GetSpotsSpotIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpotsSpotId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSpotsSpotIdResponseObject); ok {
		if err := validResponse.VisitGetSpotsSpotIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutSpotsSpotId operation middleware
func (sh *strictHandler) PutSpotsSpotId(w http.ResponseWriter, r *http.Request, spotId openapi_types.UUID) {
	var request PutSpotsSpotIdRequestObject

	request.SpotId = spotId

	var body PutSpotsSpotIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutSpotsSpotId(ctx, request.(PutSpotsSpotIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutSpotsSpotId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutSpotsSpotIdResponseObject); ok {
		if err := validResponse.VisitPutSpotsSpotIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSpotsSpotIdReviews operation middleware
func (sh *strictHandler) GetSpotsSpotIdReviews(w http.ResponseWriter, r *http.Request, spotId openapi_types.UUID) {
	var request GetSpotsSpotIdReviewsRequestObject

	request.SpotId = spotId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSpotsSpotIdReviews(ctx, request.(GetSpotsSpotIdReviewsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSpotsSpotIdReviews")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSpotsSpotIdReviewsResponseObject); ok {
		if err := validResponse.VisitGetSpotsSpotIdReviewsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSpotsSpotIdReviews operation middleware
func (sh *strictHandler) PostSpotsSpotIdReviews(w http.ResponseWriter, r *http.Request, spotId openapi_types.UUID) {
	var request PostSpotsSpotIdReviewsRequestObject

	request.SpotId = spotId

	var body PostSpotsSpotIdReviewsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSpotsSpotIdReviews(ctx, request.(PostSpotsSpotIdReviewsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSpotsSpotIdReviews")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSpotsSpotIdReviewsResponseObject); ok {
		if err := validResponse.VisitPostSpotsSpotIdReviewsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZXVMTWRr+K1bvXiIJ4tzkat2a3SmmdqssdWsuLC56kiP0TJJuuzvOUBZVOadhTCSC",
	"RgmiuHyoISSSgQVd0IA/5k13kiv+wtY5p9PpdDofCMxM7Y2GpM8573ne533ej74vhOWYIsdRXNeE0H1B",
	"C0+imMg+/k1VZZV+UFRZQaouIfZ1WI4g+n8EaWFVUnRJjgshAUgBjC0wKkD26L9GWhgS9CkFCSFB01Up",
	"PiFMDwkxpGniRM/lxjoYBpBPbKuDzk2mhwQV3U1IKooIodvcmtbG487z8vc/oLBOD70eFeOd12g7v8Mc",
	"Y4mZswe4bOVJPY/rxXfW83m/O0kRuv6OrMZEXQgJiYQU8XtMU2SOsKSjGPvwZxXdEULCnwItDwRs+AM3",
	"FZnZbm8jqqo4xf6W9CjqbS+Qz0DegJECo9QXPm4r27RpYjcIb6C7CaTpnUgqqhxT9E6jro0BPqAALs3W",
	"1zOOibVnq1bqMeByPY+tlZcnlVT9QbE286FeSNaL/z6pUOKgn8WYQi8qNJK71koJcMl6tVv9+A7wHJC0",
	"tfTWPNgB8hDwJt0aPwEyB0nMNwKStT4mzVwJ8CbgR0DmGq+W6UJcNNf2rXTS1ywg2XrSAJwCnAe8AHgN",
	"8CLgGUgS62DL2ksDLtSO580ne4CX6PeEULBxpvF6FfAh4FX6JT1xGZKkL/A2aH5g30D3JPSTX+DFYijO",
	"gO5gV1hFoo4i1/Q2LkZEHV3WpRg6A29VUaef3I9KcX30Cg068WcplogJoa+GhJgU559HnD2kuI4mkNok",
	"/9hg5yU0pA70qB+T7cXOgY75boS6Yz4WVxJ6T+C9YfcOjKdgvG3q3jolkpFqYzDgAqUUIbX9NWvxvYuF",
	"m4xJqycV3Bv49kPrW4vV4/WTSuorq/y+8WKeR8wXO8cDo32qH0ZMkzrAESMRFWmdkipUjxasdNLvZl9A",
	"1p5qXc/vmbNpK3dUL2xTXekj1T0XVw+S1swC4OLY125Uu7E1LsZQ7z3Nx48G4y7bqh9PqQ+6sLS/I1qc",
	"5GLaMI5qm8/NDcM8INbrMrv99sjlK5dHT+0CqvWlauUV1U8y56BZSx+ax/tAZhrbs+bDl+3K3hRl52i6",
	"xdEDIElIYsBPqQSTBaby5WZVkaX/4oKVnqserdCfyC6LvW3AmfqDojW7wR4ugbEIZNOR44ZxVK28AFw2",
	"c5uNQhZI1vz8HEiGHkR+Afyayjc9qMBD0lomjdxTINkGngf8jH8JeMbKHdJUtJJs4C1flR+cES4gXqwB",
	"yZjlDy27kxkOCktBi0BmaB5L9ieSzSH32UMOMfz49C8N+ZR4KCZKUT+5W2dOKAHZACNN1Y8cuqOErxsw",
	"8MDIM9d9YC49n8Bz73nawOPGdwPpH/KEFO+BVMudNAf9xf5zOCzHBgJIETXtJ1mNtG+loXBCRc3fRq6M",
	"uvdylvS7ZPNQZ0G3O95AE5KmnwMhzgjGoL5tHWPu7tae7Vwy3xQbxnw/fL3bPgFyCMavTtdy3vi38aun",
	"G2ilRI+U9KmbtBHg4H+PRBWp1xL6ZOuvvzet+Pa7W7TcYU8LIfvXlkmTuq4I03RjKX5H9tNtTxlsLTy2",
	"1lNA3jM4nlJocPna9bHqp0Vr87nTLNCVl26p4j0UvUSbgzhSL127PiYMCfeQqvG9R4aDw0EKvqyguKhI",
	"QkgYHQ4OjzIM9El2t4CY0CcDUSe4ZE3vpxQZMLaB7LAeh9XiSVwvPqoXKqzlqQD5lVfz5kLOPF5i0n3s",
	"FOWU1CLdlpaYwnVZ0ymuPLi515Cm/1WOTPG6L67bdZ+oKFEpzFYGftB4BuS9Wr9OriUe0+3E0NUEYl9o",
	"ihzXuKuvBIOnOrg9SnX5R+STm7/97lYnQL6s9dLRm/UFN/RW6rH5cJX692pw5Nzg4kMHn6P5Fcw3u9bi",
	"Eo+URCwmqlNefrgspHcUJzQagyx6xukyzjguMBPIh221hWNzpeAlGW0KZ2iX2Z61LGPWXNsdjG3fIEa2",
	"fyLhjF7vRzc/+Lh9v4vPnNlOm8AJodvt0nZ7fHq83asuD7hQ55Dz+/TwsOpOZr6yYuV27Fbe7VOyQcsw",
	"kuedHJBs9WiFzSsG0BEngV6clDhHDKQmIxfOKzd2teVPjcx/3BwLXjzHwChSRSMFlsVTgDPVg0fW9muP",
	"Rli5nXp+odNafwYpUTGuBSZQnHoZDZqZ7IkW4JK5+hHwWzYQytPWKNM5bLLHYMYnO+P24xfNsto3TYsu",
	"hmDuMd8FZKt+R/u5l8PUwakv44DHCbjMd3dxgKFsk8CZ2PqmCdpz0nRj141AZpyxTttIgWStNyu1/Q1e",
	"qVQPkvX85sD54iYzgdZLqhhDOlI1JpseHeP7t9tzUkk53SarkN5Zz+cBFwFv8YERLbiEuwmkTjVboJDw",
	"I5qyK9qW07xVwvgZSXCG8Xe/rNbmbLcTbNRxuSNrcIDHaYfgG+DVj3PW2+16ctZTgzq5wzM+cuoBIP9l",
	"ZPwFjDXAJS42fYO86e+LCO7W6Og3Th3cmT6h7Z8uBg1tp4YZoOZwpwEfv5Fs0z/LQOZ86OHIQeA+nyxP",
	"d9UFK/PALL9gU5sM4NWxr1leaB9Qbu3V9ndOWToyU242x9o9BcFzHBuosHCnbVcr2lsz8jYquIO/3wh+",
	"/AIzQjfadFayVy++ymiCmann5wC/4a+hmJzOeBhWSx8y//s7vZcAJb6MTQ6PrJf7TXp31ZjEH5hHv7vk",
	"XTx3uYvOJHlX/RqZQcnp9qjNG1zmRg2kegGVvSfrXhV1YX/JerhYK3x2eNz24ozNfk9dFXEK37Dt+b9R",
	"xIHKI/sN8dkKJLcPuhdITYC7l0hdXd5qr91vSbNNKgxSCv2RnXz+cuV+Cf0b12hNRvlIFnPX+TRgnrDn",
	"W/uSjU+K1HtdOp6Vd7XFYi27Y24YwpCQUKP2qFsLBQKiIg273jgE7o0I00PeHRq5udryR58dQoFAVA6L",
	"0UlZ00OjwWCQrR93bOw1AeClZyO30Ui+bvGNjRU6LXCz1buEC3DnGjd+3jVN7DpXedpe70Le8k6PT/8v",
	"AAD//3lfcw0LJgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
